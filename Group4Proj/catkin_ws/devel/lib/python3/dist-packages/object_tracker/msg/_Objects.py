# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_tracker/Objects.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Objects(genpy.Message):
  _md5sum = "c409bb10f65ba63532d5faef2c6ec1be"
  _type = "object_tracker/Objects"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 cone
int64 bucket
int64 obstacle
float64 coneDist
float64 bucketDist
float64 obstacleDist
float64 coneSize
float64 bucketSize
float64 obstacleSize
float64 time
"""
  __slots__ = ['cone','bucket','obstacle','coneDist','bucketDist','obstacleDist','coneSize','bucketSize','obstacleSize','time']
  _slot_types = ['int64','int64','int64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cone,bucket,obstacle,coneDist,bucketDist,obstacleDist,coneSize,bucketSize,obstacleSize,time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Objects, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cone is None:
        self.cone = 0
      if self.bucket is None:
        self.bucket = 0
      if self.obstacle is None:
        self.obstacle = 0
      if self.coneDist is None:
        self.coneDist = 0.
      if self.bucketDist is None:
        self.bucketDist = 0.
      if self.obstacleDist is None:
        self.obstacleDist = 0.
      if self.coneSize is None:
        self.coneSize = 0.
      if self.bucketSize is None:
        self.bucketSize = 0.
      if self.obstacleSize is None:
        self.obstacleSize = 0.
      if self.time is None:
        self.time = 0.
    else:
      self.cone = 0
      self.bucket = 0
      self.obstacle = 0
      self.coneDist = 0.
      self.bucketDist = 0.
      self.obstacleDist = 0.
      self.coneSize = 0.
      self.bucketSize = 0.
      self.obstacleSize = 0.
      self.time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3q7d().pack(_x.cone, _x.bucket, _x.obstacle, _x.coneDist, _x.bucketDist, _x.obstacleDist, _x.coneSize, _x.bucketSize, _x.obstacleSize, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.cone, _x.bucket, _x.obstacle, _x.coneDist, _x.bucketDist, _x.obstacleDist, _x.coneSize, _x.bucketSize, _x.obstacleSize, _x.time,) = _get_struct_3q7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3q7d().pack(_x.cone, _x.bucket, _x.obstacle, _x.coneDist, _x.bucketDist, _x.obstacleDist, _x.coneSize, _x.bucketSize, _x.obstacleSize, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.cone, _x.bucket, _x.obstacle, _x.coneDist, _x.bucketDist, _x.obstacleDist, _x.coneSize, _x.bucketSize, _x.obstacleSize, _x.time,) = _get_struct_3q7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3q7d = None
def _get_struct_3q7d():
    global _struct_3q7d
    if _struct_3q7d is None:
        _struct_3q7d = struct.Struct("<3q7d")
    return _struct_3q7d
