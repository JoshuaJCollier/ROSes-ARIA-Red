// Generated by gencpp from file megamind/CurrentGoal.msg
// DO NOT EDIT!


#ifndef MEGAMIND_MESSAGE_CURRENTGOAL_H
#define MEGAMIND_MESSAGE_CURRENTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace megamind
{
template <class ContainerAllocator>
struct CurrentGoal_
{
  typedef CurrentGoal_<ContainerAllocator> Type;

  CurrentGoal_()
    : currentGoal(0)  {
    }
  CurrentGoal_(const ContainerAllocator& _alloc)
    : currentGoal(0)  {
  (void)_alloc;
    }



   typedef int64_t _currentGoal_type;
  _currentGoal_type currentGoal;





  typedef boost::shared_ptr< ::megamind::CurrentGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::megamind::CurrentGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CurrentGoal_

typedef ::megamind::CurrentGoal_<std::allocator<void> > CurrentGoal;

typedef boost::shared_ptr< ::megamind::CurrentGoal > CurrentGoalPtr;
typedef boost::shared_ptr< ::megamind::CurrentGoal const> CurrentGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::megamind::CurrentGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::megamind::CurrentGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::megamind::CurrentGoal_<ContainerAllocator1> & lhs, const ::megamind::CurrentGoal_<ContainerAllocator2> & rhs)
{
  return lhs.currentGoal == rhs.currentGoal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::megamind::CurrentGoal_<ContainerAllocator1> & lhs, const ::megamind::CurrentGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace megamind

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::megamind::CurrentGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::megamind::CurrentGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::megamind::CurrentGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::megamind::CurrentGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::megamind::CurrentGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::megamind::CurrentGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::megamind::CurrentGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ca78cdf9677c9a77eeaeddd9e2b5143";
  }

  static const char* value(const ::megamind::CurrentGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ca78cdf9677c9a7ULL;
  static const uint64_t static_value2 = 0x7eeaeddd9e2b5143ULL;
};

template<class ContainerAllocator>
struct DataType< ::megamind::CurrentGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "megamind/CurrentGoal";
  }

  static const char* value(const ::megamind::CurrentGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::megamind::CurrentGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 currentGoal\n"
;
  }

  static const char* value(const ::megamind::CurrentGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::megamind::CurrentGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.currentGoal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurrentGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::megamind::CurrentGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::megamind::CurrentGoal_<ContainerAllocator>& v)
  {
    s << indent << "currentGoal: ";
    Printer<int64_t>::stream(s, indent + "  ", v.currentGoal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEGAMIND_MESSAGE_CURRENTGOAL_H
