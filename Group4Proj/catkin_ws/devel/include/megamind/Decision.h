// Generated by gencpp from file megamind/Decision.msg
// DO NOT EDIT!


#ifndef MEGAMIND_MESSAGE_DECISION_H
#define MEGAMIND_MESSAGE_DECISION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace megamind
{
template <class ContainerAllocator>
struct Decision_
{
  typedef Decision_<ContainerAllocator> Type;

  Decision_()
    : currentGoal(0)
    , startHeading(0.0)
    , startTime(0.0)
    , gps_travel_on(0)  {
    }
  Decision_(const ContainerAllocator& _alloc)
    : currentGoal(0)
    , startHeading(0.0)
    , startTime(0.0)
    , gps_travel_on(0)  {
  (void)_alloc;
    }



   typedef int32_t _currentGoal_type;
  _currentGoal_type currentGoal;

   typedef float _startHeading_type;
  _startHeading_type startHeading;

   typedef float _startTime_type;
  _startTime_type startTime;

   typedef int32_t _gps_travel_on_type;
  _gps_travel_on_type gps_travel_on;





  typedef boost::shared_ptr< ::megamind::Decision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::megamind::Decision_<ContainerAllocator> const> ConstPtr;

}; // struct Decision_

typedef ::megamind::Decision_<std::allocator<void> > Decision;

typedef boost::shared_ptr< ::megamind::Decision > DecisionPtr;
typedef boost::shared_ptr< ::megamind::Decision const> DecisionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::megamind::Decision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::megamind::Decision_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::megamind::Decision_<ContainerAllocator1> & lhs, const ::megamind::Decision_<ContainerAllocator2> & rhs)
{
  return lhs.currentGoal == rhs.currentGoal &&
    lhs.startHeading == rhs.startHeading &&
    lhs.startTime == rhs.startTime &&
    lhs.gps_travel_on == rhs.gps_travel_on;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::megamind::Decision_<ContainerAllocator1> & lhs, const ::megamind::Decision_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace megamind

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::megamind::Decision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::megamind::Decision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::megamind::Decision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::megamind::Decision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::megamind::Decision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::megamind::Decision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::megamind::Decision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64f33f84960e1def33c8809e718d04ee";
  }

  static const char* value(const ::megamind::Decision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64f33f84960e1defULL;
  static const uint64_t static_value2 = 0x33c8809e718d04eeULL;
};

template<class ContainerAllocator>
struct DataType< ::megamind::Decision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "megamind/Decision";
  }

  static const char* value(const ::megamind::Decision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::megamind::Decision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 currentGoal\n"
"float32 startHeading\n"
"float32 startTime\n"
"int32 gps_travel_on\n"
;
  }

  static const char* value(const ::megamind::Decision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::megamind::Decision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.currentGoal);
      stream.next(m.startHeading);
      stream.next(m.startTime);
      stream.next(m.gps_travel_on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Decision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::megamind::Decision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::megamind::Decision_<ContainerAllocator>& v)
  {
    s << indent << "currentGoal: ";
    Printer<int32_t>::stream(s, indent + "  ", v.currentGoal);
    s << indent << "startHeading: ";
    Printer<float>::stream(s, indent + "  ", v.startHeading);
    s << indent << "startTime: ";
    Printer<float>::stream(s, indent + "  ", v.startTime);
    s << indent << "gps_travel_on: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gps_travel_on);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEGAMIND_MESSAGE_DECISION_H
