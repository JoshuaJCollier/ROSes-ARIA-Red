// Generated by gencpp from file depthai_ros_msgs/AutoFocusCtrl.msg
// DO NOT EDIT!


#ifndef DEPTHAI_ROS_MSGS_MESSAGE_AUTOFOCUSCTRL_H
#define DEPTHAI_ROS_MSGS_MESSAGE_AUTOFOCUSCTRL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace depthai_ros_msgs
{
template <class ContainerAllocator>
struct AutoFocusCtrl_
{
  typedef AutoFocusCtrl_<ContainerAllocator> Type;

  AutoFocusCtrl_()
    : auto_focus_mode(0)
    , trigger_auto_focus(false)  {
    }
  AutoFocusCtrl_(const ContainerAllocator& _alloc)
    : auto_focus_mode(0)
    , trigger_auto_focus(false)  {
  (void)_alloc;
    }



   typedef uint8_t _auto_focus_mode_type;
  _auto_focus_mode_type auto_focus_mode;

   typedef uint8_t _trigger_auto_focus_type;
  _trigger_auto_focus_type trigger_auto_focus;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(AF_MODE_AUTO)
  #undef AF_MODE_AUTO
#endif
#if defined(_WIN32) && defined(AF_MODE_MACRO)
  #undef AF_MODE_MACRO
#endif
#if defined(_WIN32) && defined(AF_MODE_CONTINUOUS_VIDEO)
  #undef AF_MODE_CONTINUOUS_VIDEO
#endif
#if defined(_WIN32) && defined(AF_MODE_CONTINUOUS_PICTURE)
  #undef AF_MODE_CONTINUOUS_PICTURE
#endif
#if defined(_WIN32) && defined(AF_MODE_EDOF)
  #undef AF_MODE_EDOF
#endif

  enum {
    AF_MODE_AUTO = 0u,
    AF_MODE_MACRO = 1u,
    AF_MODE_CONTINUOUS_VIDEO = 2u,
    AF_MODE_CONTINUOUS_PICTURE = 3u,
    AF_MODE_EDOF = 4u,
  };


  typedef boost::shared_ptr< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> const> ConstPtr;

}; // struct AutoFocusCtrl_

typedef ::depthai_ros_msgs::AutoFocusCtrl_<std::allocator<void> > AutoFocusCtrl;

typedef boost::shared_ptr< ::depthai_ros_msgs::AutoFocusCtrl > AutoFocusCtrlPtr;
typedef boost::shared_ptr< ::depthai_ros_msgs::AutoFocusCtrl const> AutoFocusCtrlConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator1> & lhs, const ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator2> & rhs)
{
  return lhs.auto_focus_mode == rhs.auto_focus_mode &&
    lhs.trigger_auto_focus == rhs.trigger_auto_focus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator1> & lhs, const ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace depthai_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57bd33867f64daa701fce3a114856f8f";
  }

  static const char* value(const ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57bd33867f64daa7ULL;
  static const uint64_t static_value2 = 0x01fce3a114856f8fULL;
};

template<class ContainerAllocator>
struct DataType< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "depthai_ros_msgs/AutoFocusCtrl";
  }

  static const char* value(const ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 AF_MODE_AUTO = 0\n"
"uint8 AF_MODE_MACRO = 1\n"
"uint8 AF_MODE_CONTINUOUS_VIDEO = 2\n"
"uint8 AF_MODE_CONTINUOUS_PICTURE = 3\n"
"uint8 AF_MODE_EDOF = 4\n"
"\n"
"uint8 auto_focus_mode\n"
"\n"
"bool trigger_auto_focus\n"
;
  }

  static const char* value(const ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auto_focus_mode);
      stream.next(m.trigger_auto_focus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutoFocusCtrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::depthai_ros_msgs::AutoFocusCtrl_<ContainerAllocator>& v)
  {
    s << indent << "auto_focus_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_focus_mode);
    s << indent << "trigger_auto_focus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trigger_auto_focus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEPTHAI_ROS_MSGS_MESSAGE_AUTOFOCUSCTRL_H
